name: Benchmarks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      compare_branch:
        description: 'Branch to compare against (for PR benchmarks)'
        required: false
        default: 'main'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for comparisons
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Clone test data
      run: |
        git clone https://${{ secrets.XWORD_PARSER_TESTDATA_PAT }}@github.com/mjkoo/xword-parser-testdata.git testdata
    
    - name: Build library
      run: npm run build
    
    - name: Run benchmarks
      run: npm run bench:ci
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: bench-results.json
    
    # For PRs, compare against base branch
    - name: Compare benchmarks (PR)
      if: github.event_name == 'pull_request'
      run: |
        # Save current results
        mv bench-results.json bench-results-current.json
        
        # Checkout base branch
        git checkout ${{ github.base_ref }}
        
        # Install dependencies and build
        npm ci
        npm run build
        
        # Run benchmarks on base branch
        npm run bench:ci
        mv bench-results.json bench-results-base.json
        
        # Return to PR branch
        git checkout -
        
        # Create comparison report
        node -e "
        const fs = require('fs');
        const base = JSON.parse(fs.readFileSync('bench-results-base.json', 'utf8'));
        const current = JSON.parse(fs.readFileSync('bench-results-current.json', 'utf8'));
        
        function formatDiff(baseVal, currentVal) {
          const diff = ((currentVal - baseVal) / baseVal) * 100;
          const sign = diff > 0 ? '+' : '';
          return \`\${sign}\${diff.toFixed(2)}%\`;
        }
        
        let report = '## Benchmark Results\\n\\n';
        report += '| Test | Base (ops/sec) | Current (ops/sec) | Change |\\n';
        report += '|------|----------------|-------------------|--------|\\n';
        
        const baseResults = base.results || [];
        const currentResults = current.results || [];
        
        currentResults.forEach(currentTest => {
          const baseTest = baseResults.find(b => b.name === currentTest.name);
          if (baseTest && baseTest.hz && currentTest.hz) {
            const change = formatDiff(baseTest.hz, currentTest.hz);
            const emoji = currentTest.hz > baseTest.hz ? 'ðŸŸ¢' : currentTest.hz < baseTest.hz * 0.95 ? 'ðŸ”´' : 'ðŸŸ¡';
            report += \`| \${currentTest.name} | \${baseTest.hz.toFixed(2)} | \${currentTest.hz.toFixed(2)} | \${change} \${emoji} |\\n\`;
          }
        });
        
        fs.writeFileSync('benchmark-report.md', report);
        console.log(report);
        "
    
    - name: Comment PR with benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('benchmark-report.md', 'utf8');
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## Benchmark Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }
    
    # Store benchmarks for historical tracking (main branch only)
    - name: Store benchmark results
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'customBiggerIsBetter'
        output-file-path: bench-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '110%'
        fail-on-alert: false
        summary-always: true